/* tslint:disable */
/* eslint-disable */
/**
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateTeachingUnitRequest } from '../model';
// @ts-ignore
import { EditTeachingUnitRequest } from '../model';
// @ts-ignore
import { TeachingUnit } from '../model';
/**
 * TeachingUnitApi - axios parameter creator
 * @export
 */
export const TeachingUnitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create teaching unit
         * @param {string} lessonId Id of lesson
         * @param {CreateTeachingUnitRequest} createTeachingUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeachingUnit: async (lessonId: string, createTeachingUnitRequest: CreateTeachingUnitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('createTeachingUnit', 'lessonId', lessonId)
            // verify required parameter 'createTeachingUnitRequest' is not null or undefined
            assertParamExists('createTeachingUnit', 'createTeachingUnitRequest', createTeachingUnitRequest)
            const localVarPath = `/lessons/{lessonId}/teaching-units`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTeachingUnitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingUnit: async (teachingUnitId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teachingUnitId' is not null or undefined
            assertParamExists('deleteTeachingUnit', 'teachingUnitId', teachingUnitId)
            const localVarPath = `/teaching-units/{teachingUnitId}`
                .replace(`{${"teachingUnitId"}}`, encodeURIComponent(String(teachingUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {EditTeachingUnitRequest} editTeachingUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTeachingUnit: async (teachingUnitId: string, editTeachingUnitRequest: EditTeachingUnitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teachingUnitId' is not null or undefined
            assertParamExists('editTeachingUnit', 'teachingUnitId', teachingUnitId)
            // verify required parameter 'editTeachingUnitRequest' is not null or undefined
            assertParamExists('editTeachingUnit', 'editTeachingUnitRequest', editTeachingUnitRequest)
            const localVarPath = `/teaching-units/{teachingUnitId}`
                .replace(`{${"teachingUnitId"}}`, encodeURIComponent(String(teachingUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editTeachingUnitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingUnit: async (teachingUnitId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teachingUnitId' is not null or undefined
            assertParamExists('getTeachingUnit', 'teachingUnitId', teachingUnitId)
            const localVarPath = `/teaching-units/{teachingUnitId}`
                .replace(`{${"teachingUnitId"}}`, encodeURIComponent(String(teachingUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reorder teaching units
         * @param {string} lessonId Id of lesson
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderTeachingUnits: async (lessonId: string, requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('reorderTeachingUnits', 'lessonId', lessonId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('reorderTeachingUnits', 'requestBody', requestBody)
            const localVarPath = `/lessons/{lessonId}/teaching-units/order`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachingUnitApi - functional programming interface
 * @export
 */
export const TeachingUnitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeachingUnitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create teaching unit
         * @param {string} lessonId Id of lesson
         * @param {CreateTeachingUnitRequest} createTeachingUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeachingUnit(lessonId: string, createTeachingUnitRequest: CreateTeachingUnitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeachingUnit(lessonId, createTeachingUnitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeachingUnitApi.createTeachingUnit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeachingUnit(teachingUnitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeachingUnit(teachingUnitId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeachingUnitApi.deleteTeachingUnit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {EditTeachingUnitRequest} editTeachingUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editTeachingUnit(teachingUnitId: string, editTeachingUnitRequest: EditTeachingUnitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editTeachingUnit(teachingUnitId, editTeachingUnitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeachingUnitApi.editTeachingUnit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeachingUnit(teachingUnitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeachingUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeachingUnit(teachingUnitId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeachingUnitApi.getTeachingUnit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reorder teaching units
         * @param {string} lessonId Id of lesson
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderTeachingUnits(lessonId: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderTeachingUnits(lessonId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeachingUnitApi.reorderTeachingUnits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeachingUnitApi - factory interface
 * @export
 */
export const TeachingUnitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeachingUnitApiFp(configuration)
    return {
        /**
         * 
         * @summary Create teaching unit
         * @param {string} lessonId Id of lesson
         * @param {CreateTeachingUnitRequest} createTeachingUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeachingUnit(lessonId: string, createTeachingUnitRequest: CreateTeachingUnitRequest, options?: any): AxiosPromise<string> {
            return localVarFp.createTeachingUnit(lessonId, createTeachingUnitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingUnit(teachingUnitId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTeachingUnit(teachingUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {EditTeachingUnitRequest} editTeachingUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTeachingUnit(teachingUnitId: string, editTeachingUnitRequest: EditTeachingUnitRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editTeachingUnit(teachingUnitId, editTeachingUnitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get teaching unit
         * @param {string} teachingUnitId Id of teaching unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingUnit(teachingUnitId: string, options?: any): AxiosPromise<TeachingUnit> {
            return localVarFp.getTeachingUnit(teachingUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reorder teaching units
         * @param {string} lessonId Id of lesson
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderTeachingUnits(lessonId: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.reorderTeachingUnits(lessonId, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeachingUnitApi - object-oriented interface
 * @export
 * @class TeachingUnitApi
 * @extends {BaseAPI}
 */
export class TeachingUnitApi extends BaseAPI {
    /**
     * 
     * @summary Create teaching unit
     * @param {string} lessonId Id of lesson
     * @param {CreateTeachingUnitRequest} createTeachingUnitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingUnitApi
     */
    public createTeachingUnit(lessonId: string, createTeachingUnitRequest: CreateTeachingUnitRequest, options?: RawAxiosRequestConfig) {
        return TeachingUnitApiFp(this.configuration).createTeachingUnit(lessonId, createTeachingUnitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete teaching unit
     * @param {string} teachingUnitId Id of teaching unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingUnitApi
     */
    public deleteTeachingUnit(teachingUnitId: string, options?: RawAxiosRequestConfig) {
        return TeachingUnitApiFp(this.configuration).deleteTeachingUnit(teachingUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit teaching unit
     * @param {string} teachingUnitId Id of teaching unit
     * @param {EditTeachingUnitRequest} editTeachingUnitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingUnitApi
     */
    public editTeachingUnit(teachingUnitId: string, editTeachingUnitRequest: EditTeachingUnitRequest, options?: RawAxiosRequestConfig) {
        return TeachingUnitApiFp(this.configuration).editTeachingUnit(teachingUnitId, editTeachingUnitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get teaching unit
     * @param {string} teachingUnitId Id of teaching unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingUnitApi
     */
    public getTeachingUnit(teachingUnitId: string, options?: RawAxiosRequestConfig) {
        return TeachingUnitApiFp(this.configuration).getTeachingUnit(teachingUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reorder teaching units
     * @param {string} lessonId Id of lesson
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingUnitApi
     */
    public reorderTeachingUnits(lessonId: string, requestBody: Array<string>, options?: RawAxiosRequestConfig) {
        return TeachingUnitApiFp(this.configuration).reorderTeachingUnits(lessonId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}

