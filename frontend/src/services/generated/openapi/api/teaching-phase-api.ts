/* tslint:disable */
/* eslint-disable */
/**
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateTeachingPhaseRequest } from '../model';
// @ts-ignore
import { EditTeachingPhaseRequest } from '../model';
/**
 * TeachingPhaseApi - axios parameter creator
 * @export
 */
export const TeachingPhaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create teaching phase
         * @param {string} teachingUnitId Id of teaching unit
         * @param {CreateTeachingPhaseRequest} createTeachingPhaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeachingPhase: async (teachingUnitId: string, createTeachingPhaseRequest: CreateTeachingPhaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teachingUnitId' is not null or undefined
            assertParamExists('createTeachingPhase', 'teachingUnitId', teachingUnitId)
            // verify required parameter 'createTeachingPhaseRequest' is not null or undefined
            assertParamExists('createTeachingPhase', 'createTeachingPhaseRequest', createTeachingPhaseRequest)
            const localVarPath = `/teaching-units/{teachingUnitId}/teaching-phases`
                .replace(`{${"teachingUnitId"}}`, encodeURIComponent(String(teachingUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTeachingPhaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete teaching phase
         * @param {string} teachingPhaseId Id of teaching phase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingPhase: async (teachingPhaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teachingPhaseId' is not null or undefined
            assertParamExists('deleteTeachingPhase', 'teachingPhaseId', teachingPhaseId)
            const localVarPath = `/teaching-phases/{teachingPhaseId}`
                .replace(`{${"teachingPhaseId"}}`, encodeURIComponent(String(teachingPhaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit teaching phase
         * @param {string} teachingPhaseId Id of teaching phase
         * @param {EditTeachingPhaseRequest} editTeachingPhaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTeachingPhase: async (teachingPhaseId: string, editTeachingPhaseRequest: EditTeachingPhaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teachingPhaseId' is not null or undefined
            assertParamExists('editTeachingPhase', 'teachingPhaseId', teachingPhaseId)
            // verify required parameter 'editTeachingPhaseRequest' is not null or undefined
            assertParamExists('editTeachingPhase', 'editTeachingPhaseRequest', editTeachingPhaseRequest)
            const localVarPath = `/teaching-phases/{teachingPhaseId}`
                .replace(`{${"teachingPhaseId"}}`, encodeURIComponent(String(teachingPhaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editTeachingPhaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachingPhaseApi - functional programming interface
 * @export
 */
export const TeachingPhaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeachingPhaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create teaching phase
         * @param {string} teachingUnitId Id of teaching unit
         * @param {CreateTeachingPhaseRequest} createTeachingPhaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeachingPhase(teachingUnitId: string, createTeachingPhaseRequest: CreateTeachingPhaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeachingPhase(teachingUnitId, createTeachingPhaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeachingPhaseApi.createTeachingPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete teaching phase
         * @param {string} teachingPhaseId Id of teaching phase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeachingPhase(teachingPhaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeachingPhase(teachingPhaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeachingPhaseApi.deleteTeachingPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit teaching phase
         * @param {string} teachingPhaseId Id of teaching phase
         * @param {EditTeachingPhaseRequest} editTeachingPhaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editTeachingPhase(teachingPhaseId: string, editTeachingPhaseRequest: EditTeachingPhaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editTeachingPhase(teachingPhaseId, editTeachingPhaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeachingPhaseApi.editTeachingPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeachingPhaseApi - factory interface
 * @export
 */
export const TeachingPhaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeachingPhaseApiFp(configuration)
    return {
        /**
         * 
         * @summary Create teaching phase
         * @param {string} teachingUnitId Id of teaching unit
         * @param {CreateTeachingPhaseRequest} createTeachingPhaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeachingPhase(teachingUnitId: string, createTeachingPhaseRequest: CreateTeachingPhaseRequest, options?: any): AxiosPromise<string> {
            return localVarFp.createTeachingPhase(teachingUnitId, createTeachingPhaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete teaching phase
         * @param {string} teachingPhaseId Id of teaching phase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingPhase(teachingPhaseId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTeachingPhase(teachingPhaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit teaching phase
         * @param {string} teachingPhaseId Id of teaching phase
         * @param {EditTeachingPhaseRequest} editTeachingPhaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTeachingPhase(teachingPhaseId: string, editTeachingPhaseRequest: EditTeachingPhaseRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editTeachingPhase(teachingPhaseId, editTeachingPhaseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeachingPhaseApi - object-oriented interface
 * @export
 * @class TeachingPhaseApi
 * @extends {BaseAPI}
 */
export class TeachingPhaseApi extends BaseAPI {
    /**
     * 
     * @summary Create teaching phase
     * @param {string} teachingUnitId Id of teaching unit
     * @param {CreateTeachingPhaseRequest} createTeachingPhaseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingPhaseApi
     */
    public createTeachingPhase(teachingUnitId: string, createTeachingPhaseRequest: CreateTeachingPhaseRequest, options?: RawAxiosRequestConfig) {
        return TeachingPhaseApiFp(this.configuration).createTeachingPhase(teachingUnitId, createTeachingPhaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete teaching phase
     * @param {string} teachingPhaseId Id of teaching phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingPhaseApi
     */
    public deleteTeachingPhase(teachingPhaseId: string, options?: RawAxiosRequestConfig) {
        return TeachingPhaseApiFp(this.configuration).deleteTeachingPhase(teachingPhaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit teaching phase
     * @param {string} teachingPhaseId Id of teaching phase
     * @param {EditTeachingPhaseRequest} editTeachingPhaseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingPhaseApi
     */
    public editTeachingPhase(teachingPhaseId: string, editTeachingPhaseRequest: EditTeachingPhaseRequest, options?: RawAxiosRequestConfig) {
        return TeachingPhaseApiFp(this.configuration).editTeachingPhase(teachingPhaseId, editTeachingPhaseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

