/* tslint:disable */
/* eslint-disable */
/**
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AddBuildingBlockToPageRequest } from '../model';
// @ts-ignore
import { CreatePageRequest } from '../model';
// @ts-ignore
import { EditPageBuildingBlockPropertyValue } from '../model';
// @ts-ignore
import { EditPageRequest } from '../model';
// @ts-ignore
import { LinkPagesRequest } from '../model';
// @ts-ignore
import { Page } from '../model';
// @ts-ignore
import { PageBuildingBlockProperty } from '../model';
// @ts-ignore
import { PageOverview } from '../model';
/**
 * PageApi - axios parameter creator
 * @export
 */
export const PageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add building block to page
         * @param {string} pageId Id of page
         * @param {AddBuildingBlockToPageRequest} addBuildingBlockToPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBuildingBlockToPage: async (pageId: string, addBuildingBlockToPageRequest: AddBuildingBlockToPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('addBuildingBlockToPage', 'pageId', pageId)
            // verify required parameter 'addBuildingBlockToPageRequest' is not null or undefined
            assertParamExists('addBuildingBlockToPage', 'addBuildingBlockToPageRequest', addBuildingBlockToPageRequest)
            const localVarPath = `/pages/{pageId}/page-building-blocks`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addBuildingBlockToPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create page
         * @param {string} courseId Id of course
         * @param {CreatePageRequest} createPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: async (courseId: string, createPageRequest: CreatePageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('createPage', 'courseId', courseId)
            // verify required parameter 'createPageRequest' is not null or undefined
            assertParamExists('createPage', 'createPageRequest', createPageRequest)
            const localVarPath = `/courses/{courseId}/pages`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: async (pageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('deletePage', 'pageId', pageId)
            const localVarPath = `/pages/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit building block properties
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {Array<EditPageBuildingBlockPropertyValue>} editPageBuildingBlockPropertyValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editBuildingBlockProperties: async (pageBuildingBlockId: string, editPageBuildingBlockPropertyValue: Array<EditPageBuildingBlockPropertyValue>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageBuildingBlockId' is not null or undefined
            assertParamExists('editBuildingBlockProperties', 'pageBuildingBlockId', pageBuildingBlockId)
            // verify required parameter 'editPageBuildingBlockPropertyValue' is not null or undefined
            assertParamExists('editBuildingBlockProperties', 'editPageBuildingBlockPropertyValue', editPageBuildingBlockPropertyValue)
            const localVarPath = `/page-building-blocks/{pageBuildingBlockId}/properties`
                .replace(`{${"pageBuildingBlockId"}}`, encodeURIComponent(String(pageBuildingBlockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editPageBuildingBlockPropertyValue, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit page
         * @param {string} pageId Id of page
         * @param {EditPageRequest} editPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPage: async (pageId: string, editPageRequest: EditPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('editPage', 'pageId', pageId)
            // verify required parameter 'editPageRequest' is not null or undefined
            assertParamExists('editPage', 'editPageRequest', editPageRequest)
            const localVarPath = `/pages/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get building block properties
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildingBlockProperties: async (pageBuildingBlockId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageBuildingBlockId' is not null or undefined
            assertParamExists('getBuildingBlockProperties', 'pageBuildingBlockId', pageBuildingBlockId)
            const localVarPath = `/page-building-blocks/{pageBuildingBlockId}/properties`
                .replace(`{${"pageBuildingBlockId"}}`, encodeURIComponent(String(pageBuildingBlockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage: async (pageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getPage', 'pageId', pageId)
            const localVarPath = `/pages/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get pages
         * @param {string} courseId Id of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPages: async (courseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getPages', 'courseId', courseId)
            const localVarPath = `/courses/{courseId}/pages`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Link pages
         * @param {LinkPagesRequest} linkPagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkPages: async (linkPagesRequest: LinkPagesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkPagesRequest' is not null or undefined
            assertParamExists('linkPages', 'linkPagesRequest', linkPagesRequest)
            const localVarPath = `/page-links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkPagesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove building block from page
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBuildingBlockFromPage: async (pageBuildingBlockId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageBuildingBlockId' is not null or undefined
            assertParamExists('removeBuildingBlockFromPage', 'pageBuildingBlockId', pageBuildingBlockId)
            const localVarPath = `/page-building-blocks/{pageBuildingBlockId}`
                .replace(`{${"pageBuildingBlockId"}}`, encodeURIComponent(String(pageBuildingBlockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove link between pages
         * @param {string} pageId Id of page
         * @param {string} targetPageId Id of target page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePageLink: async (pageId: string, targetPageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('removePageLink', 'pageId', pageId)
            // verify required parameter 'targetPageId' is not null or undefined
            assertParamExists('removePageLink', 'targetPageId', targetPageId)
            const localVarPath = `/page-links/{pageId}/to/{targetPageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)))
                .replace(`{${"targetPageId"}}`, encodeURIComponent(String(targetPageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reorder pages
         * @param {string} courseId Id of course
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderPages: async (courseId: string, requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('reorderPages', 'courseId', courseId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('reorderPages', 'requestBody', requestBody)
            const localVarPath = `/courses/{courseId}/pages/order`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add building block to page
         * @param {string} pageId Id of page
         * @param {AddBuildingBlockToPageRequest} addBuildingBlockToPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBuildingBlockToPage(pageId: string, addBuildingBlockToPageRequest: AddBuildingBlockToPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBuildingBlockToPage(pageId, addBuildingBlockToPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.addBuildingBlockToPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create page
         * @param {string} courseId Id of course
         * @param {CreatePageRequest} createPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPage(courseId: string, createPageRequest: CreatePageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPage(courseId, createPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.createPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePage(pageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePage(pageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.deletePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit building block properties
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {Array<EditPageBuildingBlockPropertyValue>} editPageBuildingBlockPropertyValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editBuildingBlockProperties(pageBuildingBlockId: string, editPageBuildingBlockPropertyValue: Array<EditPageBuildingBlockPropertyValue>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editBuildingBlockProperties(pageBuildingBlockId, editPageBuildingBlockPropertyValue, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.editBuildingBlockProperties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit page
         * @param {string} pageId Id of page
         * @param {EditPageRequest} editPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPage(pageId: string, editPageRequest: EditPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPage(pageId, editPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.editPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get building block properties
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildingBlockProperties(pageBuildingBlockId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PageBuildingBlockProperty>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildingBlockProperties(pageBuildingBlockId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.getBuildingBlockProperties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPage(pageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(pageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.getPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get pages
         * @param {string} courseId Id of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPages(courseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PageOverview>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPages(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.getPages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Link pages
         * @param {LinkPagesRequest} linkPagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkPages(linkPagesRequest: LinkPagesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkPages(linkPagesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.linkPages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove building block from page
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBuildingBlockFromPage(pageBuildingBlockId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBuildingBlockFromPage(pageBuildingBlockId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.removeBuildingBlockFromPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove link between pages
         * @param {string} pageId Id of page
         * @param {string} targetPageId Id of target page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePageLink(pageId: string, targetPageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePageLink(pageId, targetPageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.removePageLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reorder pages
         * @param {string} courseId Id of course
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderPages(courseId: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderPages(courseId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.reorderPages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageApiFp(configuration)
    return {
        /**
         * 
         * @summary Add building block to page
         * @param {string} pageId Id of page
         * @param {AddBuildingBlockToPageRequest} addBuildingBlockToPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBuildingBlockToPage(pageId: string, addBuildingBlockToPageRequest: AddBuildingBlockToPageRequest, options?: any): AxiosPromise<string> {
            return localVarFp.addBuildingBlockToPage(pageId, addBuildingBlockToPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create page
         * @param {string} courseId Id of course
         * @param {CreatePageRequest} createPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage(courseId: string, createPageRequest: CreatePageRequest, options?: any): AxiosPromise<string> {
            return localVarFp.createPage(courseId, createPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage(pageId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePage(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit building block properties
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {Array<EditPageBuildingBlockPropertyValue>} editPageBuildingBlockPropertyValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editBuildingBlockProperties(pageBuildingBlockId: string, editPageBuildingBlockPropertyValue: Array<EditPageBuildingBlockPropertyValue>, options?: any): AxiosPromise<void> {
            return localVarFp.editBuildingBlockProperties(pageBuildingBlockId, editPageBuildingBlockPropertyValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit page
         * @param {string} pageId Id of page
         * @param {EditPageRequest} editPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPage(pageId: string, editPageRequest: EditPageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editPage(pageId, editPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get building block properties
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildingBlockProperties(pageBuildingBlockId: string, options?: any): AxiosPromise<Array<PageBuildingBlockProperty>> {
            return localVarFp.getBuildingBlockProperties(pageBuildingBlockId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(pageId: string, options?: any): AxiosPromise<Page> {
            return localVarFp.getPage(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get pages
         * @param {string} courseId Id of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPages(courseId: string, options?: any): AxiosPromise<Array<PageOverview>> {
            return localVarFp.getPages(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Link pages
         * @param {LinkPagesRequest} linkPagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkPages(linkPagesRequest: LinkPagesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.linkPages(linkPagesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove building block from page
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBuildingBlockFromPage(pageBuildingBlockId: string, options?: any): AxiosPromise<string> {
            return localVarFp.removeBuildingBlockFromPage(pageBuildingBlockId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove link between pages
         * @param {string} pageId Id of page
         * @param {string} targetPageId Id of target page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePageLink(pageId: string, targetPageId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removePageLink(pageId, targetPageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reorder pages
         * @param {string} courseId Id of course
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderPages(courseId: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.reorderPages(courseId, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI {
    /**
     * 
     * @summary Add building block to page
     * @param {string} pageId Id of page
     * @param {AddBuildingBlockToPageRequest} addBuildingBlockToPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public addBuildingBlockToPage(pageId: string, addBuildingBlockToPageRequest: AddBuildingBlockToPageRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).addBuildingBlockToPage(pageId, addBuildingBlockToPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create page
     * @param {string} courseId Id of course
     * @param {CreatePageRequest} createPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public createPage(courseId: string, createPageRequest: CreatePageRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).createPage(courseId, createPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete page
     * @param {string} pageId Id of page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public deletePage(pageId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).deletePage(pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit building block properties
     * @param {string} pageBuildingBlockId Id of page building block
     * @param {Array<EditPageBuildingBlockPropertyValue>} editPageBuildingBlockPropertyValue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public editBuildingBlockProperties(pageBuildingBlockId: string, editPageBuildingBlockPropertyValue: Array<EditPageBuildingBlockPropertyValue>, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).editBuildingBlockProperties(pageBuildingBlockId, editPageBuildingBlockPropertyValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit page
     * @param {string} pageId Id of page
     * @param {EditPageRequest} editPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public editPage(pageId: string, editPageRequest: EditPageRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).editPage(pageId, editPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get building block properties
     * @param {string} pageBuildingBlockId Id of page building block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getBuildingBlockProperties(pageBuildingBlockId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).getBuildingBlockProperties(pageBuildingBlockId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get page
     * @param {string} pageId Id of page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPage(pageId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).getPage(pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get pages
     * @param {string} courseId Id of course
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPages(courseId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).getPages(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Link pages
     * @param {LinkPagesRequest} linkPagesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public linkPages(linkPagesRequest: LinkPagesRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).linkPages(linkPagesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove building block from page
     * @param {string} pageBuildingBlockId Id of page building block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public removeBuildingBlockFromPage(pageBuildingBlockId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).removeBuildingBlockFromPage(pageBuildingBlockId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove link between pages
     * @param {string} pageId Id of page
     * @param {string} targetPageId Id of target page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public removePageLink(pageId: string, targetPageId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).removePageLink(pageId, targetPageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reorder pages
     * @param {string} courseId Id of course
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public reorderPages(courseId: string, requestBody: Array<string>, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).reorderPages(courseId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}

