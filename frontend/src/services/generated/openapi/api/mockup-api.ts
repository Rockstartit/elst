/* tslint:disable */
/* eslint-disable */
/**
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { EditMockupRequest } from '../model';
/**
 * MockupApi - axios parameter creator
 * @export
 */
export const MockupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete mockup
         * @param {string} mockupId Id of mockup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMockup: async (mockupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mockupId' is not null or undefined
            assertParamExists('deleteMockup', 'mockupId', mockupId)
            const localVarPath = `/mockups/{mockupId}`
                .replace(`{${"mockupId"}}`, encodeURIComponent(String(mockupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit mockup
         * @param {string} mockupId ID of mockup
         * @param {EditMockupRequest} editMockupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMockup: async (mockupId: string, editMockupRequest: EditMockupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mockupId' is not null or undefined
            assertParamExists('editMockup', 'mockupId', mockupId)
            // verify required parameter 'editMockupRequest' is not null or undefined
            assertParamExists('editMockup', 'editMockupRequest', editMockupRequest)
            const localVarPath = `/mockups/{mockupId}`
                .replace(`{${"mockupId"}}`, encodeURIComponent(String(mockupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editMockupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload mockup
         * @param {string} pageId Id of page
         * @param {string} [description] 
         * @param {File} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMockup: async (pageId: string, description?: string, fileName?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('uploadMockup', 'pageId', pageId)
            const localVarPath = `/pages/{pageId}/mockups`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('fileName', fileName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MockupApi - functional programming interface
 * @export
 */
export const MockupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MockupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete mockup
         * @param {string} mockupId Id of mockup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMockup(mockupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMockup(mockupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MockupApi.deleteMockup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit mockup
         * @param {string} mockupId ID of mockup
         * @param {EditMockupRequest} editMockupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editMockup(mockupId: string, editMockupRequest: EditMockupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editMockup(mockupId, editMockupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MockupApi.editMockup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload mockup
         * @param {string} pageId Id of page
         * @param {string} [description] 
         * @param {File} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMockup(pageId: string, description?: string, fileName?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMockup(pageId, description, fileName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MockupApi.uploadMockup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MockupApi - factory interface
 * @export
 */
export const MockupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MockupApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete mockup
         * @param {string} mockupId Id of mockup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMockup(mockupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMockup(mockupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit mockup
         * @param {string} mockupId ID of mockup
         * @param {EditMockupRequest} editMockupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMockup(mockupId: string, editMockupRequest: EditMockupRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editMockup(mockupId, editMockupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload mockup
         * @param {string} pageId Id of page
         * @param {string} [description] 
         * @param {File} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMockup(pageId: string, description?: string, fileName?: File, options?: any): AxiosPromise<string> {
            return localVarFp.uploadMockup(pageId, description, fileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MockupApi - object-oriented interface
 * @export
 * @class MockupApi
 * @extends {BaseAPI}
 */
export class MockupApi extends BaseAPI {
    /**
     * 
     * @summary Delete mockup
     * @param {string} mockupId Id of mockup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockupApi
     */
    public deleteMockup(mockupId: string, options?: RawAxiosRequestConfig) {
        return MockupApiFp(this.configuration).deleteMockup(mockupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit mockup
     * @param {string} mockupId ID of mockup
     * @param {EditMockupRequest} editMockupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockupApi
     */
    public editMockup(mockupId: string, editMockupRequest: EditMockupRequest, options?: RawAxiosRequestConfig) {
        return MockupApiFp(this.configuration).editMockup(mockupId, editMockupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload mockup
     * @param {string} pageId Id of page
     * @param {string} [description] 
     * @param {File} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MockupApi
     */
    public uploadMockup(pageId: string, description?: string, fileName?: File, options?: RawAxiosRequestConfig) {
        return MockupApiFp(this.configuration).uploadMockup(pageId, description, fileName, options).then((request) => request(this.axios, this.basePath));
    }
}

