/* tslint:disable */
/* eslint-disable */
/**
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateLessonRequest } from '../model';
// @ts-ignore
import { EditLessonRequest } from '../model';
// @ts-ignore
import { Lesson } from '../model';
// @ts-ignore
import { LessonOverview } from '../model';
/**
 * LessonApi - axios parameter creator
 * @export
 */
export const LessonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new lesson
         * @param {CreateLessonRequest} createLessonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLesson: async (createLessonRequest: CreateLessonRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLessonRequest' is not null or undefined
            assertParamExists('createLesson', 'createLessonRequest', createLessonRequest)
            const localVarPath = `/lessons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLessonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete lesson
         * @param {string} lessonId Id of lesson
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLesson: async (lessonId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('deleteLesson', 'lessonId', lessonId)
            const localVarPath = `/lessons/{lessonId}`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit lesson
         * @param {string} lessonId Id of lesson
         * @param {EditLessonRequest} editLessonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editLesson: async (lessonId: string, editLessonRequest: EditLessonRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('editLesson', 'lessonId', lessonId)
            // verify required parameter 'editLessonRequest' is not null or undefined
            assertParamExists('editLesson', 'editLessonRequest', editLessonRequest)
            const localVarPath = `/lessons/{lessonId}`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editLessonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all lessons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLessons: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lessons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get lessons
         * @param {string} lessonId Id of lesson
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLesson: async (lessonId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('getLesson', 'lessonId', lessonId)
            const localVarPath = `/lessons/{lessonId}`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LessonApi - functional programming interface
 * @export
 */
export const LessonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LessonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new lesson
         * @param {CreateLessonRequest} createLessonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLesson(createLessonRequest: CreateLessonRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLesson(createLessonRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LessonApi.createLesson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete lesson
         * @param {string} lessonId Id of lesson
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLesson(lessonId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLesson(lessonId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LessonApi.deleteLesson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit lesson
         * @param {string} lessonId Id of lesson
         * @param {EditLessonRequest} editLessonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editLesson(lessonId: string, editLessonRequest: EditLessonRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editLesson(lessonId, editLessonRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LessonApi.editLesson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all lessons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLessons(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LessonOverview>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLessons(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LessonApi.getAllLessons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get lessons
         * @param {string} lessonId Id of lesson
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLesson(lessonId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lesson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLesson(lessonId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LessonApi.getLesson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LessonApi - factory interface
 * @export
 */
export const LessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LessonApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new lesson
         * @param {CreateLessonRequest} createLessonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLesson(createLessonRequest: CreateLessonRequest, options?: any): AxiosPromise<string> {
            return localVarFp.createLesson(createLessonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete lesson
         * @param {string} lessonId Id of lesson
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLesson(lessonId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLesson(lessonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit lesson
         * @param {string} lessonId Id of lesson
         * @param {EditLessonRequest} editLessonRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editLesson(lessonId: string, editLessonRequest: EditLessonRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editLesson(lessonId, editLessonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all lessons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLessons(options?: any): AxiosPromise<Array<LessonOverview>> {
            return localVarFp.getAllLessons(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get lessons
         * @param {string} lessonId Id of lesson
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLesson(lessonId: string, options?: any): AxiosPromise<Lesson> {
            return localVarFp.getLesson(lessonId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LessonApi - object-oriented interface
 * @export
 * @class LessonApi
 * @extends {BaseAPI}
 */
export class LessonApi extends BaseAPI {
    /**
     * 
     * @summary Create new lesson
     * @param {CreateLessonRequest} createLessonRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public createLesson(createLessonRequest: CreateLessonRequest, options?: RawAxiosRequestConfig) {
        return LessonApiFp(this.configuration).createLesson(createLessonRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete lesson
     * @param {string} lessonId Id of lesson
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public deleteLesson(lessonId: string, options?: RawAxiosRequestConfig) {
        return LessonApiFp(this.configuration).deleteLesson(lessonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit lesson
     * @param {string} lessonId Id of lesson
     * @param {EditLessonRequest} editLessonRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public editLesson(lessonId: string, editLessonRequest: EditLessonRequest, options?: RawAxiosRequestConfig) {
        return LessonApiFp(this.configuration).editLesson(lessonId, editLessonRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all lessons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public getAllLessons(options?: RawAxiosRequestConfig) {
        return LessonApiFp(this.configuration).getAllLessons(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get lessons
     * @param {string} lessonId Id of lesson
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public getLesson(lessonId: string, options?: RawAxiosRequestConfig) {
        return LessonApiFp(this.configuration).getLesson(lessonId, options).then((request) => request(this.axios, this.basePath));
    }
}

