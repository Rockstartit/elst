/* tslint:disable */
/* eslint-disable */
/**
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateBuildingBlockPropertyRequest } from '../model';
// @ts-ignore
import { EditBuildingBlockPropertyRequest } from '../model';
/**
 * BuildingBlockPropertyApi - axios parameter creator
 * @export
 */
export const BuildingBlockPropertyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create building block property
         * @param {string} buildingBlockId Id of building block
         * @param {CreateBuildingBlockPropertyRequest} createBuildingBlockPropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuildingBlockProperty: async (buildingBlockId: string, createBuildingBlockPropertyRequest: CreateBuildingBlockPropertyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingBlockId' is not null or undefined
            assertParamExists('createBuildingBlockProperty', 'buildingBlockId', buildingBlockId)
            // verify required parameter 'createBuildingBlockPropertyRequest' is not null or undefined
            assertParamExists('createBuildingBlockProperty', 'createBuildingBlockPropertyRequest', createBuildingBlockPropertyRequest)
            const localVarPath = `/building-blocks/{buildingBlockId}/properties`
                .replace(`{${"buildingBlockId"}}`, encodeURIComponent(String(buildingBlockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBuildingBlockPropertyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete building block property
         * @param {string} buildingBlockId Id of building block
         * @param {string} key Key of building block property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuildingBlockProperty: async (buildingBlockId: string, key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingBlockId' is not null or undefined
            assertParamExists('deleteBuildingBlockProperty', 'buildingBlockId', buildingBlockId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('deleteBuildingBlockProperty', 'key', key)
            const localVarPath = `/building-blocks/{buildingBlockId}/properties/{key}`
                .replace(`{${"buildingBlockId"}}`, encodeURIComponent(String(buildingBlockId)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit building block property
         * @param {string} buildingBlockId Id of building block
         * @param {string} key Key of building block property
         * @param {EditBuildingBlockPropertyRequest} editBuildingBlockPropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editBuildingBlockProperty: async (buildingBlockId: string, key: string, editBuildingBlockPropertyRequest: EditBuildingBlockPropertyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingBlockId' is not null or undefined
            assertParamExists('editBuildingBlockProperty', 'buildingBlockId', buildingBlockId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('editBuildingBlockProperty', 'key', key)
            // verify required parameter 'editBuildingBlockPropertyRequest' is not null or undefined
            assertParamExists('editBuildingBlockProperty', 'editBuildingBlockPropertyRequest', editBuildingBlockPropertyRequest)
            const localVarPath = `/building-blocks/{buildingBlockId}/properties/{key}`
                .replace(`{${"buildingBlockId"}}`, encodeURIComponent(String(buildingBlockId)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editBuildingBlockPropertyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildingBlockPropertyApi - functional programming interface
 * @export
 */
export const BuildingBlockPropertyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuildingBlockPropertyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create building block property
         * @param {string} buildingBlockId Id of building block
         * @param {CreateBuildingBlockPropertyRequest} createBuildingBlockPropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBuildingBlockProperty(buildingBlockId: string, createBuildingBlockPropertyRequest: CreateBuildingBlockPropertyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBuildingBlockProperty(buildingBlockId, createBuildingBlockPropertyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingBlockPropertyApi.createBuildingBlockProperty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete building block property
         * @param {string} buildingBlockId Id of building block
         * @param {string} key Key of building block property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBuildingBlockProperty(buildingBlockId: string, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildingBlockProperty(buildingBlockId, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingBlockPropertyApi.deleteBuildingBlockProperty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit building block property
         * @param {string} buildingBlockId Id of building block
         * @param {string} key Key of building block property
         * @param {EditBuildingBlockPropertyRequest} editBuildingBlockPropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editBuildingBlockProperty(buildingBlockId: string, key: string, editBuildingBlockPropertyRequest: EditBuildingBlockPropertyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editBuildingBlockProperty(buildingBlockId, key, editBuildingBlockPropertyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingBlockPropertyApi.editBuildingBlockProperty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BuildingBlockPropertyApi - factory interface
 * @export
 */
export const BuildingBlockPropertyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuildingBlockPropertyApiFp(configuration)
    return {
        /**
         * 
         * @summary Create building block property
         * @param {string} buildingBlockId Id of building block
         * @param {CreateBuildingBlockPropertyRequest} createBuildingBlockPropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuildingBlockProperty(buildingBlockId: string, createBuildingBlockPropertyRequest: CreateBuildingBlockPropertyRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createBuildingBlockProperty(buildingBlockId, createBuildingBlockPropertyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete building block property
         * @param {string} buildingBlockId Id of building block
         * @param {string} key Key of building block property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuildingBlockProperty(buildingBlockId: string, key: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBuildingBlockProperty(buildingBlockId, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit building block property
         * @param {string} buildingBlockId Id of building block
         * @param {string} key Key of building block property
         * @param {EditBuildingBlockPropertyRequest} editBuildingBlockPropertyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editBuildingBlockProperty(buildingBlockId: string, key: string, editBuildingBlockPropertyRequest: EditBuildingBlockPropertyRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editBuildingBlockProperty(buildingBlockId, key, editBuildingBlockPropertyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BuildingBlockPropertyApi - object-oriented interface
 * @export
 * @class BuildingBlockPropertyApi
 * @extends {BaseAPI}
 */
export class BuildingBlockPropertyApi extends BaseAPI {
    /**
     * 
     * @summary Create building block property
     * @param {string} buildingBlockId Id of building block
     * @param {CreateBuildingBlockPropertyRequest} createBuildingBlockPropertyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingBlockPropertyApi
     */
    public createBuildingBlockProperty(buildingBlockId: string, createBuildingBlockPropertyRequest: CreateBuildingBlockPropertyRequest, options?: RawAxiosRequestConfig) {
        return BuildingBlockPropertyApiFp(this.configuration).createBuildingBlockProperty(buildingBlockId, createBuildingBlockPropertyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete building block property
     * @param {string} buildingBlockId Id of building block
     * @param {string} key Key of building block property
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingBlockPropertyApi
     */
    public deleteBuildingBlockProperty(buildingBlockId: string, key: string, options?: RawAxiosRequestConfig) {
        return BuildingBlockPropertyApiFp(this.configuration).deleteBuildingBlockProperty(buildingBlockId, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit building block property
     * @param {string} buildingBlockId Id of building block
     * @param {string} key Key of building block property
     * @param {EditBuildingBlockPropertyRequest} editBuildingBlockPropertyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingBlockPropertyApi
     */
    public editBuildingBlockProperty(buildingBlockId: string, key: string, editBuildingBlockPropertyRequest: EditBuildingBlockPropertyRequest, options?: RawAxiosRequestConfig) {
        return BuildingBlockPropertyApiFp(this.configuration).editBuildingBlockProperty(buildingBlockId, key, editBuildingBlockPropertyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

