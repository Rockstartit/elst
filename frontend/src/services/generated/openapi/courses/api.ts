/* tslint:disable */
/* eslint-disable */
/**
 * Course Conceptualization
 * E-Learning Specification Tool Courses
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddBuildingBlockToPageRequest
 */
export interface AddBuildingBlockToPageRequest {
    /**
     * 
     * @type {string}
     * @memberof AddBuildingBlockToPageRequest
     */
    'buildingBlockId': string;
    /**
     * 
     * @type {number}
     * @memberof AddBuildingBlockToPageRequest
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface AddPageRequest
 */
export interface AddPageRequest {
    /**
     * 
     * @type {string}
     * @memberof AddPageRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface AddSubtopicRequest
 */
export interface AddSubtopicRequest {
    /**
     * 
     * @type {string}
     * @memberof AddSubtopicRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface AddTopicRequest
 */
export interface AddTopicRequest {
    /**
     * 
     * @type {string}
     * @memberof AddTopicRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'creditPoints'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'degree'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'semester'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Course
     */
    'gradRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'knowledge'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'skills'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'schedule'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CourseInformation
 */
export interface CourseInformation {
    /**
     * 
     * @type {string}
     * @memberof CourseInformation
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CourseInformation
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CourseInformation
     */
    'creditPoints'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseInformation
     */
    'degree'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseInformation
     */
    'semester'?: string;
}
/**
 * 
 * @export
 * @interface CourseSubtopic
 */
export interface CourseSubtopic {
    /**
     * 
     * @type {string}
     * @memberof CourseSubtopic
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CourseSubtopic
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CourseSubtopic
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseSubtopic
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseSubtopic
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface CourseTopic
 */
export interface CourseTopic {
    /**
     * 
     * @type {string}
     * @memberof CourseTopic
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CourseTopic
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CourseTopic
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseTopic
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseTopic
     */
    'content'?: string;
    /**
     * 
     * @type {Array<CourseSubtopic>}
     * @memberof CourseTopic
     */
    'subtopics': Array<CourseSubtopic>;
}
/**
 * 
 * @export
 * @interface CourseUnit
 */
export interface CourseUnit {
    /**
     * 
     * @type {string}
     * @memberof CourseUnit
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CourseUnit
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CourseUnit
     */
    'learningGoals': Array<string>;
    /**
     * 
     * @type {StudyMaterials}
     * @memberof CourseUnit
     */
    'studyMaterials'?: StudyMaterials;
}
/**
 * 
 * @export
 * @interface CourseVersion
 */
export interface CourseVersion {
    /**
     * 
     * @type {string}
     * @memberof CourseVersion
     */
    'courseId': string;
    /**
     * 
     * @type {number}
     * @memberof CourseVersion
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface CreateCourseRequest
 */
export interface CreateCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'creditPoints'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'degree'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseRequest
     */
    'semester'?: string;
}
/**
 * 
 * @export
 * @interface EditCourseRequest
 */
export interface EditCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof EditCourseRequest
     */
    'schedule'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditCourseRequest
     */
    'description'?: string;
    /**
     * 
     * @type {CourseInformation}
     * @memberof EditCourseRequest
     */
    'information'?: CourseInformation;
    /**
     * 
     * @type {Prerequisite}
     * @memberof EditCourseRequest
     */
    'prerequisite'?: Prerequisite;
}
/**
 * 
 * @export
 * @interface EditCourseUnitRequest
 */
export interface EditCourseUnitRequest {
    /**
     * 
     * @type {string}
     * @memberof EditCourseUnitRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EditCourseUnitRequest
     */
    'learningGoals'?: Array<string>;
    /**
     * 
     * @type {StudyMaterials}
     * @memberof EditCourseUnitRequest
     */
    'studyMaterials'?: StudyMaterials;
}
/**
 * 
 * @export
 * @interface EditPageRequest
 */
export interface EditPageRequest {
    /**
     * 
     * @type {string}
     * @memberof EditPageRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface EditSubtopicRequest
 */
export interface EditSubtopicRequest {
    /**
     * 
     * @type {string}
     * @memberof EditSubtopicRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditSubtopicRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditSubtopicRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditSubtopicRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface EditTopicRequest
 */
export interface EditTopicRequest {
    /**
     * 
     * @type {string}
     * @memberof EditTopicRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditTopicRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditTopicRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditTopicRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'title': string;
    /**
     * 
     * @type {Array<PageBuildingBlock>}
     * @memberof Page
     */
    'buildingBlocks': Array<PageBuildingBlock>;
}
/**
 * 
 * @export
 * @interface PageBuildingBlock
 */
export interface PageBuildingBlock {
    /**
     * 
     * @type {string}
     * @memberof PageBuildingBlock
     */
    'pageBuildingBlockId': string;
    /**
     * 
     * @type {string}
     * @memberof PageBuildingBlock
     */
    'buildingBlockId': string;
    /**
     * 
     * @type {number}
     * @memberof PageBuildingBlock
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof PageBuildingBlock
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PageBuildingBlock
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PageOverview
 */
export interface PageOverview {
    /**
     * 
     * @type {string}
     * @memberof PageOverview
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PageOverview
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface Prerequisite
 */
export interface Prerequisite {
    /**
     * 
     * @type {boolean}
     * @memberof Prerequisite
     */
    'gradRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Prerequisite
     */
    'knowledge'?: string;
    /**
     * 
     * @type {string}
     * @memberof Prerequisite
     */
    'skills'?: string;
}
/**
 * 
 * @export
 * @interface StudyMaterials
 */
export interface StudyMaterials {
    /**
     * 
     * @type {string}
     * @memberof StudyMaterials
     */
    'eReading'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyMaterials
     */
    'eBook'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyMaterials
     */
    'bibliography'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudyMaterials
     */
    'relatedLinks'?: string;
}

/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new course
         * @param {CreateCourseRequest} createCourseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourse: async (createCourseRequest: CreateCourseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCourseRequest' is not null or undefined
            assertParamExists('createCourse', 'createCourseRequest', createCourseRequest)
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCourseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse: async (courseId: string, version: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('deleteCourse', 'courseId', courseId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteCourse', 'version', version)
            const localVarPath = `/courses/{courseId}/{version}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {EditCourseRequest} editCourseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCourse: async (courseId: string, version: number, editCourseRequest: EditCourseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('editCourse', 'courseId', courseId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('editCourse', 'version', version)
            // verify required parameter 'editCourseRequest' is not null or undefined
            assertParamExists('editCourse', 'editCourseRequest', editCourseRequest)
            const localVarPath = `/courses/{courseId}/{version}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editCourseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Evolve course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolveCourse: async (courseId: string, version: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('evolveCourse', 'courseId', courseId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('evolveCourse', 'version', version)
            const localVarPath = `/courses/{courseId}/{version}/evolve`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCourses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse: async (courseId: string, version: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getCourse', 'courseId', courseId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getCourse', 'version', version)
            const localVarPath = `/courses/{courseId}/{version}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new course
         * @param {CreateCourseRequest} createCourseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCourse(createCourseRequest: CreateCourseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCourse(createCourseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.createCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourse(courseId: string, version: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourse(courseId, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.deleteCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {EditCourseRequest} editCourseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editCourse(courseId: string, version: number, editCourseRequest: EditCourseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editCourse(courseId, version, editCourseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.editCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Evolve course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evolveCourse(courseId: string, version: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evolveCourse(courseId, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.evolveCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCourses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Course>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCourses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getAllCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourse(courseId: string, version: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourse(courseId, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new course
         * @param {CreateCourseRequest} createCourseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourse(createCourseRequest: CreateCourseRequest, options?: any): AxiosPromise<CourseVersion> {
            return localVarFp.createCourse(createCourseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(courseId: string, version: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCourse(courseId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {EditCourseRequest} editCourseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCourse(courseId: string, version: number, editCourseRequest: EditCourseRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editCourse(courseId, version, editCourseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Evolve course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolveCourse(courseId: string, version: number, options?: any): AxiosPromise<CourseVersion> {
            return localVarFp.evolveCourse(courseId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCourses(options?: any): AxiosPromise<Array<Course>> {
            return localVarFp.getAllCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse(courseId: string, version: number, options?: any): AxiosPromise<Course> {
            return localVarFp.getCourse(courseId, version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI {
    /**
     * 
     * @summary Create new course
     * @param {CreateCourseRequest} createCourseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public createCourse(createCourseRequest: CreateCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).createCourse(createCourseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete course
     * @param {string} courseId Id of course
     * @param {number} version Version of course
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public deleteCourse(courseId: string, version: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).deleteCourse(courseId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit course
     * @param {string} courseId Id of course
     * @param {number} version Version of course
     * @param {EditCourseRequest} editCourseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public editCourse(courseId: string, version: number, editCourseRequest: EditCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).editCourse(courseId, version, editCourseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Evolve course
     * @param {string} courseId Id of course
     * @param {number} version Version of course
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public evolveCourse(courseId: string, version: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).evolveCourse(courseId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getAllCourses(options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getAllCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get course
     * @param {string} courseId Id of course
     * @param {number} version Version of course
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourse(courseId: string, version: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourse(courseId, version, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseUnitApi - axios parameter creator
 * @export
 */
export const CourseUnitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create course unit
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourseUnit: async (courseId: string, version: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('createCourseUnit', 'courseId', courseId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('createCourseUnit', 'version', version)
            const localVarPath = `/courses/{courseId}/{version}/course-units`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Subtopic
         * @param {string} topicId Id of topic
         * @param {AddSubtopicRequest} addSubtopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubtopic: async (topicId: string, addSubtopicRequest: AddSubtopicRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId' is not null or undefined
            assertParamExists('createSubtopic', 'topicId', topicId)
            // verify required parameter 'addSubtopicRequest' is not null or undefined
            assertParamExists('createSubtopic', 'addSubtopicRequest', addSubtopicRequest)
            const localVarPath = `/topics/{topicId}/subtopics`
                .replace(`{${"topicId"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSubtopicRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Topic
         * @param {string} courseUnitId Id of course unit
         * @param {AddTopicRequest} addTopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopic: async (courseUnitId: string, addTopicRequest: AddTopicRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseUnitId' is not null or undefined
            assertParamExists('createTopic', 'courseUnitId', courseUnitId)
            // verify required parameter 'addTopicRequest' is not null or undefined
            assertParamExists('createTopic', 'addTopicRequest', addTopicRequest)
            const localVarPath = `/course-units/{courseUnitId}/topics`
                .replace(`{${"courseUnitId"}}`, encodeURIComponent(String(courseUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTopicRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete course unit
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourseUnit: async (courseUnitId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseUnitId' is not null or undefined
            assertParamExists('deleteCourseUnit', 'courseUnitId', courseUnitId)
            const localVarPath = `/course-units/{courseUnitId}`
                .replace(`{${"courseUnitId"}}`, encodeURIComponent(String(courseUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete subtopic
         * @param {string} subtopicId Id of subtopic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubtopic: async (subtopicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subtopicId' is not null or undefined
            assertParamExists('deleteSubtopic', 'subtopicId', subtopicId)
            const localVarPath = `/subtopics/{subtopicId}`
                .replace(`{${"subtopicId"}}`, encodeURIComponent(String(subtopicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} topicId Id of topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTopic: async (topicId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId' is not null or undefined
            assertParamExists('deleteTopic', 'topicId', topicId)
            const localVarPath = `/topics/{topicId}`
                .replace(`{${"topicId"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit course unit
         * @param {string} courseUnitId Id of course unit
         * @param {EditCourseUnitRequest} editCourseUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCourseUnit: async (courseUnitId: string, editCourseUnitRequest: EditCourseUnitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseUnitId' is not null or undefined
            assertParamExists('editCourseUnit', 'courseUnitId', courseUnitId)
            // verify required parameter 'editCourseUnitRequest' is not null or undefined
            assertParamExists('editCourseUnit', 'editCourseUnitRequest', editCourseUnitRequest)
            const localVarPath = `/course-units/{courseUnitId}`
                .replace(`{${"courseUnitId"}}`, encodeURIComponent(String(courseUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editCourseUnitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit subtopic
         * @param {string} subtopicId Id of subtopic
         * @param {EditSubtopicRequest} editSubtopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSubtopic: async (subtopicId: string, editSubtopicRequest: EditSubtopicRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subtopicId' is not null or undefined
            assertParamExists('editSubtopic', 'subtopicId', subtopicId)
            // verify required parameter 'editSubtopicRequest' is not null or undefined
            assertParamExists('editSubtopic', 'editSubtopicRequest', editSubtopicRequest)
            const localVarPath = `/subtopics/{subtopicId}`
                .replace(`{${"subtopicId"}}`, encodeURIComponent(String(subtopicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editSubtopicRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit topic
         * @param {string} topicId Id of topic
         * @param {EditTopicRequest} editTopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTopic: async (topicId: string, editTopicRequest: EditTopicRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicId' is not null or undefined
            assertParamExists('editTopic', 'topicId', topicId)
            // verify required parameter 'editTopicRequest' is not null or undefined
            assertParamExists('editTopic', 'editTopicRequest', editTopicRequest)
            const localVarPath = `/topics/{topicId}`
                .replace(`{${"topicId"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editTopicRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get course units of course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCourseUnits: async (courseId: string, version: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getAllCourseUnits', 'courseId', courseId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getAllCourseUnits', 'version', version)
            const localVarPath = `/courses/{courseId}/{version}/course-units`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get course unit
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseUnit: async (courseUnitId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseUnitId' is not null or undefined
            assertParamExists('getCourseUnit', 'courseUnitId', courseUnitId)
            const localVarPath = `/course-units/{courseUnitId}`
                .replace(`{${"courseUnitId"}}`, encodeURIComponent(String(courseUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Topics
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopics: async (courseUnitId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseUnitId' is not null or undefined
            assertParamExists('getTopics', 'courseUnitId', courseUnitId)
            const localVarPath = `/course-units/{courseUnitId}/topics`
                .replace(`{${"courseUnitId"}}`, encodeURIComponent(String(courseUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseUnitApi - functional programming interface
 * @export
 */
export const CourseUnitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseUnitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create course unit
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCourseUnit(courseId: string, version: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseUnit(courseId, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.createCourseUnit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Subtopic
         * @param {string} topicId Id of topic
         * @param {AddSubtopicRequest} addSubtopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubtopic(topicId: string, addSubtopicRequest: AddSubtopicRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubtopic(topicId, addSubtopicRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.createSubtopic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Topic
         * @param {string} courseUnitId Id of course unit
         * @param {AddTopicRequest} addTopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTopic(courseUnitId: string, addTopicRequest: AddTopicRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTopic(courseUnitId, addTopicRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.createTopic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete course unit
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourseUnit(courseUnitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseUnit(courseUnitId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.deleteCourseUnit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete subtopic
         * @param {string} subtopicId Id of subtopic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubtopic(subtopicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubtopic(subtopicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.deleteSubtopic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} topicId Id of topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTopic(topicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTopic(topicId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.deleteTopic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit course unit
         * @param {string} courseUnitId Id of course unit
         * @param {EditCourseUnitRequest} editCourseUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editCourseUnit(courseUnitId: string, editCourseUnitRequest: EditCourseUnitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editCourseUnit(courseUnitId, editCourseUnitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.editCourseUnit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit subtopic
         * @param {string} subtopicId Id of subtopic
         * @param {EditSubtopicRequest} editSubtopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editSubtopic(subtopicId: string, editSubtopicRequest: EditSubtopicRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editSubtopic(subtopicId, editSubtopicRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.editSubtopic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit topic
         * @param {string} topicId Id of topic
         * @param {EditTopicRequest} editTopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editTopic(topicId: string, editTopicRequest: EditTopicRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editTopic(topicId, editTopicRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.editTopic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get course units of course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCourseUnits(courseId: string, version: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseUnit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCourseUnits(courseId, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.getAllCourseUnits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get course unit
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseUnit(courseUnitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseUnit(courseUnitId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.getCourseUnit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Topics
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopics(courseUnitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseTopic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopics(courseUnitId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseUnitApi.getTopics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseUnitApi - factory interface
 * @export
 */
export const CourseUnitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseUnitApiFp(configuration)
    return {
        /**
         * 
         * @summary Create course unit
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourseUnit(courseId: string, version: number, options?: any): AxiosPromise<string> {
            return localVarFp.createCourseUnit(courseId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Subtopic
         * @param {string} topicId Id of topic
         * @param {AddSubtopicRequest} addSubtopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubtopic(topicId: string, addSubtopicRequest: AddSubtopicRequest, options?: any): AxiosPromise<string> {
            return localVarFp.createSubtopic(topicId, addSubtopicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Topic
         * @param {string} courseUnitId Id of course unit
         * @param {AddTopicRequest} addTopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopic(courseUnitId: string, addTopicRequest: AddTopicRequest, options?: any): AxiosPromise<string> {
            return localVarFp.createTopic(courseUnitId, addTopicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete course unit
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourseUnit(courseUnitId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCourseUnit(courseUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete subtopic
         * @param {string} subtopicId Id of subtopic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubtopic(subtopicId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSubtopic(subtopicId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete topic
         * @param {string} topicId Id of topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTopic(topicId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTopic(topicId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit course unit
         * @param {string} courseUnitId Id of course unit
         * @param {EditCourseUnitRequest} editCourseUnitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCourseUnit(courseUnitId: string, editCourseUnitRequest: EditCourseUnitRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editCourseUnit(courseUnitId, editCourseUnitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit subtopic
         * @param {string} subtopicId Id of subtopic
         * @param {EditSubtopicRequest} editSubtopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSubtopic(subtopicId: string, editSubtopicRequest: EditSubtopicRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editSubtopic(subtopicId, editSubtopicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit topic
         * @param {string} topicId Id of topic
         * @param {EditTopicRequest} editTopicRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTopic(topicId: string, editTopicRequest: EditTopicRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editTopic(topicId, editTopicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get course units of course
         * @param {string} courseId Id of course
         * @param {number} version Version of course
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCourseUnits(courseId: string, version: number, options?: any): AxiosPromise<Array<CourseUnit>> {
            return localVarFp.getAllCourseUnits(courseId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get course unit
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseUnit(courseUnitId: string, options?: any): AxiosPromise<CourseUnit> {
            return localVarFp.getCourseUnit(courseUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Topics
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopics(courseUnitId: string, options?: any): AxiosPromise<Array<CourseTopic>> {
            return localVarFp.getTopics(courseUnitId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseUnitApi - object-oriented interface
 * @export
 * @class CourseUnitApi
 * @extends {BaseAPI}
 */
export class CourseUnitApi extends BaseAPI {
    /**
     * 
     * @summary Create course unit
     * @param {string} courseId Id of course
     * @param {number} version Version of course
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public createCourseUnit(courseId: string, version: number, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).createCourseUnit(courseId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Subtopic
     * @param {string} topicId Id of topic
     * @param {AddSubtopicRequest} addSubtopicRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public createSubtopic(topicId: string, addSubtopicRequest: AddSubtopicRequest, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).createSubtopic(topicId, addSubtopicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Topic
     * @param {string} courseUnitId Id of course unit
     * @param {AddTopicRequest} addTopicRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public createTopic(courseUnitId: string, addTopicRequest: AddTopicRequest, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).createTopic(courseUnitId, addTopicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete course unit
     * @param {string} courseUnitId Id of course unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public deleteCourseUnit(courseUnitId: string, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).deleteCourseUnit(courseUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete subtopic
     * @param {string} subtopicId Id of subtopic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public deleteSubtopic(subtopicId: string, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).deleteSubtopic(subtopicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete topic
     * @param {string} topicId Id of topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public deleteTopic(topicId: string, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).deleteTopic(topicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit course unit
     * @param {string} courseUnitId Id of course unit
     * @param {EditCourseUnitRequest} editCourseUnitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public editCourseUnit(courseUnitId: string, editCourseUnitRequest: EditCourseUnitRequest, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).editCourseUnit(courseUnitId, editCourseUnitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit subtopic
     * @param {string} subtopicId Id of subtopic
     * @param {EditSubtopicRequest} editSubtopicRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public editSubtopic(subtopicId: string, editSubtopicRequest: EditSubtopicRequest, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).editSubtopic(subtopicId, editSubtopicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit topic
     * @param {string} topicId Id of topic
     * @param {EditTopicRequest} editTopicRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public editTopic(topicId: string, editTopicRequest: EditTopicRequest, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).editTopic(topicId, editTopicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get course units of course
     * @param {string} courseId Id of course
     * @param {number} version Version of course
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public getAllCourseUnits(courseId: string, version: number, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).getAllCourseUnits(courseId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get course unit
     * @param {string} courseUnitId Id of course unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public getCourseUnit(courseUnitId: string, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).getCourseUnit(courseUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Topics
     * @param {string} courseUnitId Id of course unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseUnitApi
     */
    public getTopics(courseUnitId: string, options?: RawAxiosRequestConfig) {
        return CourseUnitApiFp(this.configuration).getTopics(courseUnitId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PageApi - axios parameter creator
 * @export
 */
export const PageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add building block to page
         * @param {string} pageId Id of page
         * @param {AddBuildingBlockToPageRequest} addBuildingBlockToPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBuildingBlockToPage: async (pageId: string, addBuildingBlockToPageRequest: AddBuildingBlockToPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('addBuildingBlockToPage', 'pageId', pageId)
            // verify required parameter 'addBuildingBlockToPageRequest' is not null or undefined
            assertParamExists('addBuildingBlockToPage', 'addBuildingBlockToPageRequest', addBuildingBlockToPageRequest)
            const localVarPath = `/pages/{pageId}/page-building-blocks`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addBuildingBlockToPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create page
         * @param {string} courseUnitId Id of course unit
         * @param {AddPageRequest} addPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: async (courseUnitId: string, addPageRequest: AddPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseUnitId' is not null or undefined
            assertParamExists('createPage', 'courseUnitId', courseUnitId)
            // verify required parameter 'addPageRequest' is not null or undefined
            assertParamExists('createPage', 'addPageRequest', addPageRequest)
            const localVarPath = `/course-units/{courseUnitId}/pages`
                .replace(`{${"courseUnitId"}}`, encodeURIComponent(String(courseUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: async (pageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('deletePage', 'pageId', pageId)
            const localVarPath = `/pages/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit page
         * @param {string} pageId Id of page
         * @param {EditPageRequest} editPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPage: async (pageId: string, editPageRequest: EditPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('editPage', 'pageId', pageId)
            // verify required parameter 'editPageRequest' is not null or undefined
            assertParamExists('editPage', 'editPageRequest', editPageRequest)
            const localVarPath = `/pages/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage: async (pageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getPage', 'pageId', pageId)
            const localVarPath = `/pages/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get pages
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPages: async (courseUnitId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseUnitId' is not null or undefined
            assertParamExists('getPages', 'courseUnitId', courseUnitId)
            const localVarPath = `/course-units/{courseUnitId}/pages`
                .replace(`{${"courseUnitId"}}`, encodeURIComponent(String(courseUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove building block from page
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBuildingBlockFromPage: async (pageBuildingBlockId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageBuildingBlockId' is not null or undefined
            assertParamExists('removeBuildingBlockFromPage', 'pageBuildingBlockId', pageBuildingBlockId)
            const localVarPath = `/page-building-blocks/{pageBuildingBlockId}`
                .replace(`{${"pageBuildingBlockId"}}`, encodeURIComponent(String(pageBuildingBlockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add building block to page
         * @param {string} pageId Id of page
         * @param {AddBuildingBlockToPageRequest} addBuildingBlockToPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBuildingBlockToPage(pageId: string, addBuildingBlockToPageRequest: AddBuildingBlockToPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBuildingBlockToPage(pageId, addBuildingBlockToPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.addBuildingBlockToPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create page
         * @param {string} courseUnitId Id of course unit
         * @param {AddPageRequest} addPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPage(courseUnitId: string, addPageRequest: AddPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPage(courseUnitId, addPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.createPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePage(pageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePage(pageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.deletePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit page
         * @param {string} pageId Id of page
         * @param {EditPageRequest} editPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPage(pageId: string, editPageRequest: EditPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPage(pageId, editPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.editPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPage(pageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(pageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.getPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get pages
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPages(courseUnitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PageOverview>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPages(courseUnitId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.getPages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove building block from page
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBuildingBlockFromPage(pageBuildingBlockId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBuildingBlockFromPage(pageBuildingBlockId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageApi.removeBuildingBlockFromPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageApiFp(configuration)
    return {
        /**
         * 
         * @summary Add building block to page
         * @param {string} pageId Id of page
         * @param {AddBuildingBlockToPageRequest} addBuildingBlockToPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBuildingBlockToPage(pageId: string, addBuildingBlockToPageRequest: AddBuildingBlockToPageRequest, options?: any): AxiosPromise<string> {
            return localVarFp.addBuildingBlockToPage(pageId, addBuildingBlockToPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create page
         * @param {string} courseUnitId Id of course unit
         * @param {AddPageRequest} addPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage(courseUnitId: string, addPageRequest: AddPageRequest, options?: any): AxiosPromise<string> {
            return localVarFp.createPage(courseUnitId, addPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage(pageId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePage(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit page
         * @param {string} pageId Id of page
         * @param {EditPageRequest} editPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPage(pageId: string, editPageRequest: EditPageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.editPage(pageId, editPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get page
         * @param {string} pageId Id of page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(pageId: string, options?: any): AxiosPromise<Page> {
            return localVarFp.getPage(pageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get pages
         * @param {string} courseUnitId Id of course unit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPages(courseUnitId: string, options?: any): AxiosPromise<Array<PageOverview>> {
            return localVarFp.getPages(courseUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove building block from page
         * @param {string} pageBuildingBlockId Id of page building block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBuildingBlockFromPage(pageBuildingBlockId: string, options?: any): AxiosPromise<string> {
            return localVarFp.removeBuildingBlockFromPage(pageBuildingBlockId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI {
    /**
     * 
     * @summary Add building block to page
     * @param {string} pageId Id of page
     * @param {AddBuildingBlockToPageRequest} addBuildingBlockToPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public addBuildingBlockToPage(pageId: string, addBuildingBlockToPageRequest: AddBuildingBlockToPageRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).addBuildingBlockToPage(pageId, addBuildingBlockToPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create page
     * @param {string} courseUnitId Id of course unit
     * @param {AddPageRequest} addPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public createPage(courseUnitId: string, addPageRequest: AddPageRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).createPage(courseUnitId, addPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete page
     * @param {string} pageId Id of page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public deletePage(pageId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).deletePage(pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit page
     * @param {string} pageId Id of page
     * @param {EditPageRequest} editPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public editPage(pageId: string, editPageRequest: EditPageRequest, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).editPage(pageId, editPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get page
     * @param {string} pageId Id of page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPage(pageId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).getPage(pageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get pages
     * @param {string} courseUnitId Id of course unit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public getPages(courseUnitId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).getPages(courseUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove building block from page
     * @param {string} pageBuildingBlockId Id of page building block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public removeBuildingBlockFromPage(pageBuildingBlockId: string, options?: RawAxiosRequestConfig) {
        return PageApiFp(this.configuration).removeBuildingBlockFromPage(pageBuildingBlockId, options).then((request) => request(this.axios, this.basePath));
    }
}



