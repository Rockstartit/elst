openapi: 3.0.3
info:
  title: Course Conceptualization
  description: E-Learning Specification Tool Courses
  version: 1.0.0
servers:
  - url: http://localhost:8500
security:
  - bearerAuth: []
paths:
  /lessons/{lessonId}/courses:
    post:
      tags:
        - Course
      summary: Create new course
      operationId: createCourse
      parameters:
        - name: lessonId
          in: path
          description: Id of lesson
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityId"
        400:
          description: Invalid Request
        401:
          description: Not Authenticated
  /courses:
    get:
      tags:
        - Course
      summary: Get all courses
      operationId: getAllCourses
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
        401:
          description: Not Authenticated
  /courses/{courseId}:
    get:
      tags:
        - Course
      summary: Get course
      operationId: getCourse
      parameters:
        - name: courseId
          in: path
          description: Id of course
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Invalid Request
        401:
          description: Not Authenticated
    patch:
      tags:
        - Course
      summary: Edit course
      operationId: editCourse
      parameters:
        - name: courseId
          in: path
          description: Id of course
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCourseRequest'
        required: true
      responses:
        200:
          description: Ok
        400:
          description: Invalid Request
        401:
          description: Not Authenticated
    delete:
      tags:
        - Course
      summary: Delete course
      operationId: deleteCourse
      parameters:
        - name: courseId
          in: path
          description: Id of course
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      responses:
        200:
          description: ok
        404:
          description: Not Found
        401:
          description: Not Authenticated
  /courses/{courseId}/pages:
    get:
      tags:
        - Page
      summary: Get pages
      operationId: getPages
      parameters:
        - name: courseId
          in: path
          description: Id of course
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PageOverview"
        404:
          description: Not Found
        401:
          description: Not Authenticated
    post:
      tags:
        - Page
      summary: Create page
      operationId: createPage
      parameters:
        - name: courseId
          in: path
          description: Id of course
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePageRequest'
        required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityId"
        404:
          description: Not Found
        401:
          description: Not Authenticated
  /pages/{pageId}:
    get:
      tags:
        - Page
      summary: Get page
      operationId: getPage
      parameters:
        - name: pageId
          in: path
          description: Id of page
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        404:
          description: Not Found
        401:
          description: Not Authenticated
    patch:
      tags:
        - Page
      summary: Edit page
      operationId: editPage
      parameters:
        - name: pageId
          in: path
          description: Id of page
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPageRequest'
        required: true
      responses:
        200:
          description: ok
        404:
          description: Not Found
        401:
          description: Not Authenticated
    delete:
      tags:
        - Page
      summary: Delete page
      operationId: deletePage
      parameters:
        - name: pageId
          in: path
          description: Id of page
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      responses:
        200:
          description: ok
        404:
          description: Not Found
        401:
          description: Not Authenticated
  /page-links:
    post:
      tags:
        - Page
      summary: Link pages
      operationId: linkPages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkPagesRequest'
        required: true
      responses:
        200:
          description: ok
        404:
          description: Not Found
        401:
          description: Not Authenticated
  /page-links/{pageId}/to/{targetPageId}:
    delete:
      tags:
        - Page
      summary: Remove link between pages
      operationId: removePageLink
      parameters:
        - name: pageId
          in: path
          description: Id of page
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
        - name: targetPageId
          in: path
          description: Id of target page
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      responses:
        200:
          description: ok
        404:
          description: Not Found
        401:
          description: Not Authenticated
  /pages/{pageId}/page-building-blocks:
    post:
      tags:
        - Page
      summary: Add building block to page
      operationId: addBuildingBlockToPage
      parameters:
        - name: pageId
          in: path
          description: Id of page
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBuildingBlockToPageRequest'
        required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityId"
        404:
          description: Not Found
        401:
          description: Not Authenticated
  /page-building-blocks/{pageBuildingBlockId}:
    delete:
      tags:
        - Page
      summary: Remove building block from page
      operationId: removeBuildingBlockFromPage
      parameters:
        - name: pageBuildingBlockId
          in: path
          description: Id of page building block
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityId"
        404:
          description: Not Found
        401:
          description: Not Authenticated
  /pages/{pageId}/mockups:
    post:
      tags:
        - Mockup
      summary: Upload mockup
      operationId: uploadMockup
      parameters:
        - in: path
          name: pageId
          description: Id of page
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description:
                  type: string
                fileName:
                  type: string
                  format: binary
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityId'
        '400':
          description: Bad request, e.g., invalid file format
        '500':
          description: Internal server error
  /mockups/{mockupId}:
    patch:
      tags:
        - Mockup
      summary: Edit mockup
      operationId: editMockup
      parameters:
        - in: path
          name: mockupId
          description: ID of mockup
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMockupRequest'
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request, e.g., invalid file format
        '500':
          description: Internal server error
    delete:
      tags:
        - Mockup
      summary: Delete mockup
      operationId: deleteMockup
      parameters:
        - in: path
          name: learningMaterialId
          description: Id of mockup
          required: true
          schema:
            $ref: '#/components/schemas/EntityId'
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request, e.g., invalid file format
        '500':
          description: Internal server error
components:
  schemas:
    CourseOverview:
      type: object
      required:
        - id
        - technologyWish
      properties:
        id:
          $ref: "#/components/schemas/EntityId"
        lessonId:
          $ref: "#/components/schemas/EntityId"
        technologyWish:
          type: string
          example: Wordpress
    Course:
      type: object
      required:
        - id
        - technologyWish
      properties:
        id:
          $ref: "#/components/schemas/EntityId"
        lessonId:
          $ref: "#/components/schemas/EntityId"
        technologyWish:
          type: string
          example: Wordpress
        notes:
          type: string
    CreateCourseRequest:
      type: object
      required:
        - technologyWish
      properties:
        technologyWish:
          type: string
          example: Wordpress
    EditCourseRequest:
      type: object
      properties:
        technologyWish:
          type: string
          example: Wordpress
        notes:
          type: string
    CreatePageRequest:
      type: object
      required:
        - title
        - teachingPhaseId
      properties:
        title:
          type: string
        teachingPhaseId:
          $ref: "#/components/schemas/EntityId"
    EditPageRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
    LinkPagesRequest:
      type: object
      required:
        - pageId
        - targetPageId
      properties:
        pageId:
          $ref: "#/components/schemas/EntityId"
        targetPageId:
          $ref: "#/components/schemas/EntityId"
    PageOverview:
      type: object
      required:
        - id
        - teachingPhaseId
        - title
      properties:
        id:
          $ref: "#/components/schemas/EntityId"
        teachingPhaseId:
          $ref: "#/components/schemas/EntityId"
        title:
          type: string
    Page:
      type: object
      required:
        - id
        - teachingPhaseId
        - title
        - buildingBlocks
      properties:
        id:
          $ref: "#/components/schemas/EntityId"
        teachingPhaseId:
          $ref: "#/components/schemas/EntityId"
        title:
          type: string
        buildingBlocks:
          type: array
          items:
            $ref: "#/components/schemas/PageBuildingBlock"
        linkedPages:
          type: array
          items:
            $ref: "#/components/schemas/PageOverview"
    Mockup:
      type: object
      required:
        - id
        - fileId
      properties:
        id:
          $ref: '#/components/schemas/EntityId'
        fileId:
          $ref: '#/components/schemas/EntityId'
        description:
          type: string
          example: Lernplan
    EditMockupRequest:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          example: Lernplan
    PageBuildingBlock:
      type: object
      required:
        - pageBuildingBlockId
        - version
        - name
        - releaseStatus
      properties:
        pageBuildingBlockId:
          $ref: "#/components/schemas/EntityId"
        version:
          $ref: "./openapi-building-blocks.yaml#/components/schemas/BuildingBlockVersion"
        name:
          type: string
        description:
          type: string
        releaseStatus:
          $ref: "#/components/schemas/ReleaseStatus"
    AddBuildingBlockToPageRequest:
      type: object
      required:
        - buildingBlockId
        - version
      properties:
        buildingBlockId:
          $ref: "#/components/schemas/EntityId"
        version:
          $ref: "#/components/schemas/VersionNumber"
    ReleaseStatus:
      type: string
      enum:
        - IN_DEVELOPMENT
        - RELEASED
    VersionNumber:
      type: number
      example: 1
    EntityId:
      type: string
      format: uuid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT